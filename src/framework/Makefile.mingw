###########################################################################
#   Copyright (C) 2008 by Oliver Bock                                     #
#   oliver.bock[AT]aei.mpg.de                                             #
#                                                                         #
#   This file is part of Einstein@Home.                                   #
#                                                                         #
#   Einstein@Home is free software: you can redistribute it and/or modify #
#   it under the terms of the GNU General Public License as published     #
#   by the Free Software Foundation, version 2 of the License.            #
#                                                                         #
#   Einstein@Home is distributed in the hope that it will be useful,      #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with Einstein@Home. If not, see <http://www.gnu.org/licenses/>. #
#                                                                         #
###########################################################################

# path settings
FRAMEWORK_SRC?=$(PWD)
FRAMEWORK_INSTALL?=$(PWD)

# Product specific. Activates code within GraphicsEngineFactory switch cases.
PRODUCT_UPPER := $(shell echo $(PRODUCT) | tr a-z A-Z)
CPPFLAGS += -D$(PRODUCT_UPPER)

# config values
CXX?=g++
TARGET_SYSTEM?=i686-pc-mingw32

# variables
CPPFLAGS += $(shell $(FRAMEWORK_INSTALL)/bin/freetype-config --cflags)
CPPFLAGS += $(shell $(FRAMEWORK_INSTALL)/bin/xml2-config --cflags)
CPPFLAGS += -I$(FRAMEWORK_INSTALL)/include/boinc -I$(FRAMEWORK_INSTALL)/include
CPPFLAGS += -DGLEW_STATIC
CPPFLAGS += -DWIN_OGL_WORKAROUND
CPPFLAGS += -DWIN_OGFLT_WORKAROUND

# Note the mention of 'glew.o' here.
DEPS = Makefile
OBJS = AbstractGraphicsEngine.o ErrorHandler.o GraphicsEngineFactory.o glew.o
OBJS += WindowManager.o Resource.o ResourceFactory.o BOINCClientAdapter.o Libxml2Adapter.o
OBJS += TriggerTimer.o Events.o

# TODO: GraphicsEngineFactory obviously depends on the actual implementations (here solarsystem)! need to change the structure! what about plugins?
CPPFLAGS += -I$(FRAMEWORK_SRC)
CPPFLAGS += -I$(FRAMEWORK_SRC)/../solarsystem
CPPFLAGS += -I$(SOLARSYSTEM_INSTALL)/include/boinc

# primary role based tagets
default: release
debug: libframework.a
memcheck: clean debug
callgrind: clean debug
release: clean libframework.a

# target specific options
debug: CPPFLAGS += -pg -gstabs3 -O0 -Wall -Wno-switch-enum
release: CPPFLAGS += -DNDEBUG -gstabs3 -O3 -Wall -Wno-switch-enum

# file based targets
libframework.a: $(OBJS)  $(FRAMEWORK_SRC)/framework.h
	ar rcs libframework.a $(OBJS)
	$(TARGET_SYSTEM)-ranlib libframework.a

AbstractGraphicsEngine.o: $(DEPS) $(FRAMEWORK_SRC)/AbstractGraphicsEngine.cpp $(FRAMEWORK_SRC)/AbstractGraphicsEngine.h
	$(CXX) -g ${CPPFLAGS} -c $(FRAMEWORK_SRC)/AbstractGraphicsEngine.cpp

ErrorHandler.o: $(DEPS) $(FRAMEWORK_SRC)/ErrorHandler.cpp $(FRAMEWORK_SRC)/ErrorHandler.h
	$(CXX) -g $(CPPFLAGS) -c $(FRAMEWORK_SRC)/ErrorHandler.cpp

Events.o: $(DEPS) $(FRAMEWORK_SRC)/Events.cpp $(FRAMEWORK_SRC)/Events.h
	$(CXX) -g ${CPPFLAGS} -c $(FRAMEWORK_SRC)/Events.cpp

glew.o: $(DEPS) $(FRAMEWORK_SRC)/glew.c $(FRAMEWORK_INSTALL)/include/GL/glew.h
	$(CXX) -g -DGLEW_STATIC ${CPPFLAGS} -c $(FRAMEWORK_SRC)/glew.c

GraphicsEngineFactory.o: $(DEPS) $(FRAMEWORK_SRC)/GraphicsEngineFactory.cpp $(FRAMEWORK_SRC)/GraphicsEngineFactory.h
	$(CXX) -g ${CPPFLAGS} -c $(FRAMEWORK_SRC)/GraphicsEngineFactory.cpp

WindowManager.o: $(DEPS) $(FRAMEWORK_SRC)/WindowManager.cpp $(FRAMEWORK_SRC)/WindowManager.h
	$(CXX) -g ${CPPFLAGS} -c $(FRAMEWORK_SRC)/WindowManager.cpp

BOINCClientAdapter.o: $(DEPS) $(FRAMEWORK_SRC)/BOINCClientAdapter.cpp $(FRAMEWORK_SRC)/BOINCClientAdapter.h
	$(CXX) -g ${CPPFLAGS} -c $(FRAMEWORK_SRC)/BOINCClientAdapter.cpp

ResourceFactory.o: $(DEPS) $(FRAMEWORK_SRC)/ResourceFactory.cpp $(FRAMEWORK_SRC)/ResourceFactory.h
	$(CXX) -g ${CPPFLAGS} -c $(FRAMEWORK_SRC)/ResourceFactory.cpp

Resource.o: $(DEPS) $(FRAMEWORK_SRC)/Resource.cpp $(FRAMEWORK_SRC)/Resource.h
	$(CXX) -g ${CPPFLAGS} -c $(FRAMEWORK_SRC)/Resource.cpp

Libxml2Adapter.o: $(DEPS) $(FRAMEWORK_SRC)/Libxml2Adapter.cpp $(FRAMEWORK_SRC)/Libxml2Adapter.h $(FRAMEWORK_SRC)/XMLProcessorInterface.h
	$(CXX) -g ${CPPFLAGS} -c $(FRAMEWORK_SRC)/Libxml2Adapter.cpp

TriggerTimer.o: $(DEPS) $(FRAMEWORK_SRC)/TriggerTimer.cpp $(FRAMEWORK_SRC)/TriggerTimer.h
	$(CXX) -g ${CPPFLAGS} -c $(FRAMEWORK_SRC)/TriggerTimer.cpp

# tools
install:
	cp libframework.a $(ORC_INSTALL)/lib

clean:
	rm -f $(OBJS) libframework.a
