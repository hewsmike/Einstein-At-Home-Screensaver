###########################################################################
#   Copyright (C) 2013 by Mike Hewson                                     #
#   hewsmike[AT]iinet.net.au                                              #
#                                                                         #
#   This file is part of Einstein@Home.                                   #
#                                                                         #
#   Einstein@Home is free software: you can redistribute it and/or modify #
#   it under the terms of the GNU General Public License as published     #
#   by the Free Software Foundation, version 2 of the License.            #
#                                                                         #
#   Einstein@Home is distributed in the hope that it will be useful,      #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with Einstein@Home. If not, see <http://www.gnu.org/licenses/>. #
#                                                                         #
###########################################################################
# Please invoke this makefile with the following command template
# ( where < and > in this explanation delimit the text to be inserted
# and ' does appear on the command line to encase argument values ) :
#
# make TARGET SYSTEM='?' PRODUCT='?'
#
# where :
#
# TARGET is <debug> or <release> or <install> or <clean>    ( all SYSTEM choices )
#
#        is <valgrind> or <callgrind>                       ( if SYSTEM='linux' )
#
# SYSTEM value is <linux>                         ( not required if
#                                                             TARGET is <install>
#                                                             or <clean> )
#
# PRODUCT value is case sensitive name of primary           ( not required if
#         AbstractGraphicsEngine derivative for this          TARGET is <install>
#         product eg. <Starsphere>            or <clean> )
#
# NB The following variables are assumed to have been ( appropriately )
# set ( or not ) in the environment :
#
# CPPFLAGS
# CXX
# CXXFLAGS
# DEBUGFLAGSCPP
# FRAMEWORK_SRC
# LDFLAGS
# PROJECT_ROOT#
#
###########################################################################
# Overall settings.
# Product name in lowercase.
PRODUCT_LOWER := $(shell echo $(PRODUCT) | tr A-Z a-z)
PRODUCT_UPPER := $(shell echo $(PRODUCT) | tr a-z A-Z)

# Path settings.
PRODUCT_SRC := $(PROJECT_ROOT)/src/$(PRODUCT_LOWER)
PRODUCT_INSTALL := $(PROJECT_ROOT)/install

# Product variants.
GRAV := Gravity
RADIO := Radio
GAMMA := Gamma

# Target variants.
TARGET_APPEND=
ifeq ".$(SYSTEM)" ".linux"
    TARGET_APPEND := "${TARGET_SYSTEM}-gnu"
endif
ifeq ".$(SYSTEM)" ".win32"
    TARGET_APPEND := "windows_intelx86.exe"
endif

# Config values.
CXX ?= g++

###########################################################################
# Compiler variables.

# Target specific.
ifeq ".$(SYSTEM)" ".linux"
    CPPFLAGS += -I/usr/include -I/usr/include/GL
    CPPFLAGS += -DGL_GLEXT_PROTOTYPES
    CPPFLAGS += -Iusr/include/GL
endif
ifeq ".$(SYSTEM)" ".win32"
    CPPFLAGS += -I/usr/i686-w64-mingw32 -I/usr/i686-w64-mingw32/include
    CPPFLAGS += -DGL_GLEXT_PROTOTYPES
    CPPFLAGS += -DWIN32_GLEXT_LINKS
    CPPFLAGS += -DGLEW_STATIC
endif

# Generic.
CPPFLAGS += -std=c++11
CPPFLAGS += -I$(PRODUCT_INSTALL)/include
CPPFLAGS += $(shell $(PRODUCT_INSTALL)/bin/freetype-config --cflags)
CPPFLAGS += $(shell $(PRODUCT_INSTALL)/bin/xml2-config --cflags)
CPPFLAGS += $(shell $(PRODUCT_INSTALL)/bin/sdl2-config --cflags)
CPPFLAGS += -I$(PRODUCT_INSTALL)/include/boinc
CPPFLAGS += -I$(PRODUCT_INSTALL)/include/GL
CPPFLAGS += -I$(PRODUCT_INSTALL)/include/glm
CPPFLAGS += -I$(PRODUCT_INSTALL)/include/glm/gtc
CPPFLAGS += -I$(PRODUCT_INSTALL)/include/SDL2
CPPFLAGS += -I$(FRAMEWORK_SRC) -I$(PROJECT_ROOT)/src/ -I$(PROJECT_ROOT)/src/framework -I$(PROJECT_ROOT)/src/ogl_utility

$(info ************************)
$(info CPPFLAGS is $(CPPFLAGS))
$(info ************************)

###########################################################################
# Library variables. Note carefully the ordering with respect
# to '-Wl, -Bstatic' and '-Wl, -Bdynamic'

# Target specific.
ifeq ".$(SYSTEM)" ".linux"
	LIBS += -Wl,-Bstatic
    LIBS += -L$(PRODUCT_INSTALL)/lib -L$(PRODUCT_INSTALL)/lib64
    LIBS += -lSDL2_ttf -lfreetype -lSDL2 -lxml2 -lz -lbz2 -lGLEW -lframework -loglutility -lboinc_api -lboinc
    LIBS += -Wl,-Bdynamic
    LIBS += -L/usr/lib/X11 -lX11 -lXrandr -lXrender
    LIBS += -L/usr/lib/x86_64-linux-gnu/mesa
    LIBS += -lGL -ldl -lpthread -lm -lrt

endif

ifeq ".$(SYSTEM)" ".win32"
    LIBS += -Wl,-Bstatic
    LIBS += -lframework -loglutility -L$(PRODUCT_INSTALL)/lib
    LIBS += $(shell $(PRODUCT_INSTALL)/bin/freetype-config --libs)
    LIBS += $(shell $(PRODUCT_INSTALL)/bin/xml2-config --libs)
    LIBS += $(shell $(PRODUCT_INSTALL)/bin/sdl2-config --libs)
    LIBS += -lws2_32 # required by libxml2
    LIBS += -lboinc_graphics2 -lboinc_api -lboinc
    LIBS += -Wl,-Bdynamic
    LIBS += -lopengl32
endif

###########################################################################
# Loader variables.
# Generic.
LDFLAGS += -static-libstdc++

# Target specific.

###########################################################################
# Dependencies.
# Generic.
DEPS = Makefile
OBJS = $(PRODUCT).o $(PRODUCT)$(GRAV).o $(PRODUCT)$(RADIO).o $(PRODUCT)$(GAMMA).o
OBJS += EinsteinGravityAdapter.o EinsteinRadioAdapter.o EinsteinGammaAdapter.o
OBJS += $(RESOURCESPEC).o
RESOURCESPEC = resources

# Target specific.
ifeq ".$(SYSTEM)" ".win32"
    OBJS += $(RESOURCESPEC)_mingw.o
endif

# Product specific.
OBJS += gamma_list.o pulsar_list.o snr_list.o starlist.o

# Rules for object builds from sources.

%.o : $(PRODUCT_SRC)/%.c
	$(CXX) -g $(CPPFLAGS) -c $<

%.o : $(PRODUCT_SRC)/%.cpp $(PRODUCT_SRC)/%.h
	$(CXX) -g $(CPPFLAGS) -c $<

###########################################################################
# Role based targets.
# All product variants will be built by default !!
# Generic.
default: release
debug: $(PRODUCT_LOWER)
release: clean $(PRODUCT_LOWER)
$(PRODUCT_LOWER): $(PRODUCT_LOWER)_Einstein_$(GRAV) $(PRODUCT_LOWER)_Einstein_$(RADIO) $(PRODUCT_LOWER)_Einstein_$(GAMMA)

# Target specific.
ifeq ".$(SYSTEM)" ".linux"
memcheck: clean debug $(PRODUCT_LOWER)
callgrind: clean debug $(PRODUCT_LOWER)
endif

###########################################################################
# Generic options.
# To use memcheck, have removed CPPFLAGS += -pg
debug: CPPFLAGS += -O0 -Wall -Wno-switch-enum

release: CPPFLAGS += -DNDEBUG -O3 -Wall -Wno-switch-enum
$(PRODUCT_LOWER)_Einstein_$(GRAV): CPPFLAGS += -D SCIENCE_APP=Einstein$(GRAV)
$(PRODUCT_LOWER)_Einstein_$(RADIO): CPPFLAGS += -D SCIENCE_APP=Einstein$(RADIO)
$(PRODUCT_LOWER)_Einstein_$(GAMMA): CPPFLAGS += -D SCIENCE_APP=Einstein$(GAMMA)

# Target specific options.
ifeq ".$(SYSTEM)" ".linux"

debug: CPPFLAGS += -ggdb3
release : CPPFLAGS += -ggdb3
memcheck: CPPFLAGS += $(DEBUGFLAGSCPP) -D DEBUG_VALGRIND
callgrind: CPPFLAGS += $(DEBUGFLAGSCPP) -D DEBUG_VALGRIND

endif

ifeq ".$(SYSTEM)" ".win32"

debug: CPPFLAGS += -gstabs3
release: CPPFLAGS += -gstabs3

endif

###########################################################################
# File based targets.
# Required product executables.
$(PRODUCT_LOWER)_Einstein_$(GRAV): $(DEPS) $(PRODUCT_SRC)/main.cpp $(OBJS)
	$(CXX) -g $(CPPFLAGS) $(LDFLAGS) $(PRODUCT_SRC)/main.cpp -o "graphics_app=einsteinGravity_RUNLABEL_VERSION_graphics_$(TARGET_APPEND)" $(OBJS) $(LIBS)

$(PRODUCT_LOWER)_Einstein_$(RADIO): $(DEPS) $(PRODUCT_SRC)/main.cpp $(OBJS)
	$(CXX) -g $(CPPFLAGS) $(LDFLAGS) $(PRODUCT_SRC)/main.cpp -o "graphics_app=einsteinRadio_RUNLABEL_VERSION_graphics_$(TARGET_APPEND)" $(OBJS) $(LIBS)

$(PRODUCT_LOWER)_Einstein_$(GAMMA): $(DEPS) $(PRODUCT_SRC)/main.cpp $(OBJS)
	$(CXX) -g $(CPPFLAGS) $(LDFLAGS) $(PRODUCT_SRC)/main.cpp -o "graphics_app=einsteinGamma_RUNLABEL_VERSION_graphics_$(TARGET_APPEND)" $(OBJS) $(LIBS)

###########################################################################
# Target specific modules.

###########################################################################
# Resource compiler.
# Generic.
$(RESOURCESPEC).o: $(PRODUCT_SRC)/$(RESOURCESPEC).orc
	$(PRODUCT_INSTALL)/bin/orc $(PRODUCT_SRC)/$(RESOURCESPEC).orc $(RESOURCESPEC).cpp
	$(CXX) -g $(CPPFLAGS) -c $(RESOURCESPEC).cpp -o $(RESOURCESPEC).o

# Target specific.
ifeq ".$(SYSTEM)" ".win32"
$(RESOURCESPEC)_mingw.o: $(PRODUCT_SRC)/$(RESOURCESPEC).rc
#	cp $(PRODUCT_SRC)/*.ico .
#	/usr/bin/i586-mingw32msvc-windres -O coff -o $(RESOURCESPEC)_mingw.o $(PRODUCT_SRC)/$(RESOURCESPEC).rc
endif

###########################################################################
# Non-file based role targets.
# Generic.
install:
	mkdir -p $(PRODUCT_INSTALL)/../dist
	cp -f graphics_app* $(PRODUCT_INSTALL)/../dist

clean:
	rm -rf $(RESOURCESPEC).cpp $(OBJS) graphics_app*

# Target specific tools.
ifeq ".$(SYSTEM)" ".linux"
memcheck:
	valgrind --tool=memcheck --track-fds=yes --time-stamp=yes --log-file=$(PWD)/memcheck.out.%p --leak-check=full $(PWD)/graphics_app=einsteinGravity_RUNLABEL_VERSION_graphics_$(TARGET_APPEND)
callgrind:
	valgrind --tool=callgrind --track-fds=yes --time-stamp=yes $(PWD)/graphics_app=einsteinGravity_RUNLABEL_VERSION_graphics_$(TARGET_APPEND)
endif
