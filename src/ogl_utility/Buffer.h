/***************************************************************************
 *   Copyright (C) 2015 by Mike Hewson                                     *
 *   hewsmike[AT]iinet.net.au                                              *
 *                                                                         *
 *   This file is part of Einstein@Home.                                   *
 *                                                                         *
 *   Einstein@Home is free software: you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published     *
 *   by the Free Software Foundation, version 2 of the License.            *
 *                                                                         *
 *   Einstein@Home is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with Einstein@Home. If not, see <http://www.gnu.org/licenses/>. *
 *                                                                         *
 ***************************************************************************/

#ifndef BUFFER_H_
#define BUFFER_H_

#include "ogl_utility.h"
#include "OGL_ID.h"

/**
 * \addtogroup ogl_utility OGL_Utility
 * @{
 */

/**
 * \brief This virtual interface declares public methods to deal with OpenGL
 *        buffer objects. Such objects are NOT C++ language objects in client
 *        code, but those generated by the OpenGL API on request and then
 *        manipulated by the relevant identifier/handle using OpenGL API calls.
 *
 *    It's a generic wrapper, with further typing/behaviour being managed in
 * detail in derived classes.
 *
 * \see IndexBuffer
 * \see OGL_ID
 * \see TextureBuffer
 * \see VertexBuffer
 *
 * \author Mike Hewson\n
 */

class Buffer : public OGL_ID {
    public :
        /**
         * \brief Constructor.
         *
         * \param buffer_data : pointer to the data to be copied from client
         *                      memory and stored in an underlying OpenGL
         *                      buffer type. As this is in client memory it
         *                      ought persist at least until OpenGL resource
         *                      acquisition has occurred . Will fail fatally
         *                      if NULL supplied.
         * \param bytes : the number of bytes of data. This must be a strictly
         *                positive ( non-zero ) integer.
         */
        Buffer(const GLvoid* buffer_data, GLuint bytes);

        /**
         * \brief Destructor.
         */
        virtual ~Buffer();

        /**
         * \brief Obtains the underlying OpenGL buffer object resources
         *        from the OpenGL state machine.
         *
         * \return a boolean indicating success of acquisition
         *              true - resources acquired without error
         *              false - resources were not acquired
         */
        virtual bool acquire(void) = 0;

        /**
         * \brief Releases the underlying OpenGL buffer object resources
         *        from the OpenGL state machine.
         */
        virtual void release(void) = 0;

        /**
         * \brief The acquisition state of the underlying OpenGL buffer
         *        object with respect to the OpenGL state machine. That is,
         *        have the OpenGL state machine resources been acquired ?
         *
         * \return a boolean indicating acquisition state :
         *          true : the object has acquired resources
         *          false : the object does not have acquired resources
         */
        bool isAcquired(void) const;

        /**
		 * \brief The number of bytes stored within the buffer.
		 *
		 * \return The size of the buffer in bytes.
		 */
		GLuint size(void) const;

		/**
         * \brief Perform any binding to the OpenGL pipeline.
         */
        virtual void bind(void) = 0;

        /**
         * \brief Remove any binding to the OpenGL pipeline.
         */
        virtual void unbind(void) = 0;

        /**
         * \brief The binding state of the underlying OpenGL buffer
         *        object to the OpenGL state machine.
         *
         * \return a boolean indicating binding state :
         *          true - the object is bound
         *          false - the object is not bound
         */
        bool isBound(void) const;

    protected :
        /**
         * \brief Obtain the pointer to immutable byte granular data.
         *        By construction this is guaranteed to be non-NULL.
         *        HOWEVER as it refers to a location in client memory
         *        it OUGHT be valid for the lifetime of an object of this
         *        class. Failing that then at least until state machine
         *        resources have been acquired and data copied to same
         *        ( and assuming no re-acquistion is later desired ).
         *
         * \return pointer to client memory location of buffer data.
         */
        const GLvoid* data(void) const;

        /**
         * \brief Set the binding state flag for this object.
         *
         * \param state : the desired binding state.
         *                  true - the object is bound
         *                  false - the object is not bound
         */
        void setBoundState(bool state);

        /**
         * \brief Set the acquisition state flag for this object.
         *
         * \param state : the desired acquisition state.
         *                  true - the object has acquired resources
         *                  false - the object does not have acquired resources
         */
        void setAcquisitionState(bool state);

    private:
        /// Flag indicating if OpenGL resources have been acquired.
        bool m_acquire_flag;

        /// Flag indicating if the underlying OpenGL object is bound
        /// to the OpenGL state machine.
        bool m_bound_flag;

        /// The number of bytes to be allocated to the buffer.
        GLsizeiptr m_size;

        /// A valid pointer to untyped data in client memory. Note other
        /// comments regarding persistence.
        GLvoid* m_data;

        /**
         * \brief Populate the buffer with data. This is the where a valid
         *        client side pointer is required.
         */
        virtual void loadBuffer(void) const = 0;
    };

/**
 * @}
 */

#endif /*BUFFER_H_*/
